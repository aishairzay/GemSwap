{"transactions":{"CreateSecretMessageVault":"import VaultService from 0xVaultService\n\ntransaction(description: String, thumbnail: String, passwordSalt: String, hashControl: String, hashAlgorithm: String, encryptedMessage: String?, encryptionAlgorithm: String?, derivedPublicKey: String?) {\n  let vaultCollection: &VaultService.VaultCollection\n\n  prepare(signer: AuthAccount) {\n    var vaultCollectionCap = signer.borrow<&VaultService.VaultCollection>(from: /storage/VaultCollection)\n    if (vaultCollectionCap == nil) {\n      let vaultCollection <- VaultService.createVaultCollection()\n      signer.save(<-vaultCollection, to: /storage/VaultCollection)\n      vaultCollectionCap = signer.borrow<&VaultService.VaultCollection>(from: /storage/VaultCollection)\n      self.vaultCollection = vaultCollectionCap!\n    } else {\n      self.vaultCollection = vaultCollectionCap!\n    }\n    signer.link<&{VaultService.VaultCollectionPublic}>(/public/VaultCollection, target: /storage/VaultCollection)\n  }\n\n  execute {\n    let vault <- VaultService.createVault(description: description, thumbnail: thumbnail, passwordSalt: passwordSalt, hashControl: hashControl, hashAlgorithm: hashAlgorithm, encryptedMessage: encryptedMessage, encryptionAlgorithm: encryptionAlgorithm, derivedPublicKey: derivedPublicKey, action: nil)\n    self.vaultCollection.deposit(vault: <-vault)\n  }\n}\n"},"scripts":{"GetVaultByVaultID":"import VaultService from 0xVaultService\n\npub fun main(vaultID: UInt64):AnyStruct {\n  let address = VaultService.vaultAddresses[vaultID] ?? panic(\"No address found\")\n  let vaultCollection = getAccount(address).getCapability<&{VaultService.VaultCollectionPublic}>(/public/VaultCollection).borrow()\n    ?? panic(\"Could not borrow capability from public collection\")\n  let vault = vaultCollection.borrowVault(uuid: vaultID)\n  return vault\n}\n","GetVaults":"import VaultService from 0xVaultService\n\npub fun main(address: Address):[AnyStruct] {\n  let vaultCollection = getAccount(address).getCapability<&{VaultService.VaultCollectionPublic}>(/public/VaultCollection).borrow()\n    ?? panic(\"Could not borrow capability from public collection\")\n  let ids = vaultCollection.getIDs()\n  var vaults: [AnyStruct] = []\n  for id in ids {\n    let vault = vaultCollection.borrowVault(uuid: id)\n    vaults.append(vault)\n  }\n  return vaults\n}\n"},"vars":{"emulator":{"0xFungibleToken":"0xee82856bf20e2aa6","0xMetadataViews":"0xf3fcd2c1a78f5eee","0xNonFungibleToken":"0xf3fcd2c1a78f5eee","0xSomeStandardVaultActions":"0xf3fcd2c1a78f5eee","0xVaultService":"0xf3fcd2c1a78f5eee"},"testnet":{"0xFungibleToken":"0x9a0766d93b6608b7","0xMetadataViews":"0x631e88ae7f1d7c20","0xNonFungibleToken":"0x631e88ae7f1d7c20","0xSomeStandardVaultActions":null,"0xVaultService":"0xbbbeb7f62d6d47dd"},"mainnet":{"0xFungibleToken":"0xf233dcee88fe0abe","0xMetadataViews":"0x1d7e57aa55817448","0xNonFungibleToken":"0x1d7e57aa55817448","0xSomeStandardVaultActions":null,"0xVaultService":null}}}